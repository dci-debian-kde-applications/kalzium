Index: kalzium/plasmoid/applet/gasPlasmoid/gasCalculator.cpp
===================================================================
--- kalzium.orig/plasmoid/applet/gasPlasmoid/gasCalculator.cpp	2016-01-29 12:51:59.868499690 +0100
+++ kalzium/plasmoid/applet/gasPlasmoid/gasCalculator.cpp	2016-01-30 18:28:53.626722528 +0100
@@ -427,7 +427,7 @@
     double temp = (m_converter->convert(m_Temp, "kelvins")).number();
     double b = (m_converter->convert(m_Vand_B, "liters")).number();
 
-    pressure = m_Moles * R * temp / (volume - m_Moles * b) - m_Moles * m_Moles * m_Vand_A / volume / volume;
+    pressure = m_Moles * GAS_R * temp / (volume - m_Moles * b) - m_Moles * m_Moles * m_Vand_A / volume / volume;
     m_Pressure = Value(pressure, "atmospheres");
     m_Pressure = m_converter->convert(m_Pressure, m_pressureUnit->nativeWidget()->currentText());
     m_pressure->setValue(m_Pressure.number());
@@ -444,7 +444,7 @@
     double temp = ((m_converter->convert(m_Temp, "kelvins")).number());
     double b = ((m_converter->convert(m_Vand_B, "liters")).number());
 
-    m_MolarMass = mass * R * temp / (pressure + m_Moles * m_Moles * m_Vand_A / volume / volume)\
+    m_MolarMass = mass * GAS_R * temp / (pressure + m_Moles * m_Moles * m_Vand_A / volume / volume)\
                   / (volume - m_Moles * b);
     m_molarMass->setValue(m_MolarMass);
 }
@@ -457,7 +457,7 @@
     double temp = ((m_converter->convert(m_Temp, "kelvins")).number());
     double b = ((m_converter->convert(m_Vand_B, "liters")).number());
 
-    volume = m_Moles * R * temp / pressure + (m_Moles * b);
+    volume = m_Moles * GAS_R * temp / pressure + (m_Moles * b);
     m_Vol = Value(volume, "liters");
     m_Vol = (m_converter->convert(m_Vol, m_volumeUnit->nativeWidget()->currentText()));
     m_volume->setValue(m_Vol.number());
@@ -472,7 +472,7 @@
     double b = ((m_converter->convert(m_Vand_B, "liters")).number());
 
     temp = (pressure + (m_Moles * m_Moles * m_Vand_A / volume / volume))\
-           * (volume - m_Moles * b) / m_Moles / R;
+           * (volume - m_Moles * b) / m_Moles / GAS_R;
     m_Temp = Value(temp, "kelvins");
     m_Temp = (m_converter->convert(m_Temp, m_temperatureUnit->nativeWidget()->currentText()));
     m_temperature->setValue(m_Temp.number());
@@ -487,7 +487,7 @@
     double b = ((m_converter->convert(m_Vand_B, "liters")).number());
 
     m_Moles = (pressure + m_Moles * m_Moles * m_Vand_A / volume / volume)\
-              * (volume - m_Moles * b) / R / temp;
+              * (volume - m_Moles * b) / GAS_R / temp;
     m_moles->setValue(m_Moles);
 }
 
@@ -501,7 +501,7 @@
     double b = ((m_converter->convert(m_Vand_B, "liters")).number());
 
     mass = (pressure + m_Moles * m_Moles * m_Vand_A / volume / volume)\
-           * (volume - m_Moles * b) * m_MolarMass / R / temp;
+           * (volume - m_Moles * b) * m_MolarMass / GAS_R / temp;
     m_Mass = Value(mass, "grams");
     m_Mass = (m_converter->convert(m_Mass, m_massUnit->nativeWidget()->currentText()));
     m_mass->setValue(m_Mass.number());
Index: kalzium/plasmoid/applet/gasPlasmoid/gasCalculator.h
===================================================================
--- kalzium.orig/plasmoid/applet/gasPlasmoid/gasCalculator.h	2016-01-29 12:51:59.868499690 +0100
+++ kalzium/plasmoid/applet/gasPlasmoid/gasCalculator.h	2016-01-30 18:27:52.641166807 +0100
@@ -23,7 +23,7 @@
 
 #include "ui_gasCalculatorConfig.h"
 
-#define R 0.08206
+#define GAS_R 0.08206
 
 namespace Plasma{
     class ComboBox;
Index: kalzium/src/calculator/gasCalculator.cpp
===================================================================
--- kalzium.orig/src/calculator/gasCalculator.cpp	2016-01-29 12:51:59.872499528 +0100
+++ kalzium/src/calculator/gasCalculator.cpp	2016-01-30 18:29:46.584599932 +0100
@@ -140,7 +140,7 @@
     double temp = m_temp.convertTo(KUnitConversion::Kelvin).number();
     double b = m_Vand_b.convertTo(KUnitConversion::Liter).number();
 
-    double pressure = m_moles * R * temp / (volume - m_moles * b) - m_moles * m_moles * m_Vand_a / volume / volume;
+    double pressure = m_moles * GAS_R * temp / (volume - m_moles * b) - m_moles * m_moles * m_Vand_a / volume / volume;
 
     m_pressure = Value(pressure, KUnitConversion::Atmosphere);
     m_pressure = m_pressure.convertTo(getCurrentUnitId(ui.pressure_unit));
@@ -155,7 +155,7 @@
     double temp = m_temp.convertTo(KUnitConversion::Kelvin).number();
     double b = m_Vand_b.convertTo(KUnitConversion::Liter).number();
 
-    m_molarMass = mass * R * temp / (pressure + m_moles * m_moles * m_Vand_a / volume / volume)\
+    m_molarMass = mass * GAS_R * temp / (pressure + m_moles * m_moles * m_Vand_a / volume / volume)\
                   / (volume - m_moles * b);
     ui.molarMass->setValue(m_molarMass);
 }
@@ -166,7 +166,7 @@
     double temp = m_temp.convertTo(KUnitConversion::Kelvin).number();
     double b = m_Vand_b.convertTo(KUnitConversion::Liter).number();
 
-    double volume = m_moles * R * temp / pressure + (m_moles * b);
+    double volume = m_moles * GAS_R * temp / pressure + (m_moles * b);
     m_vol = Value(volume, KUnitConversion::Liter);
     m_vol = m_vol.convertTo(getCurrentUnitId(ui.volume_unit));
     ui.volume->setValue(m_vol.number());
@@ -179,7 +179,7 @@
     double b = m_Vand_b.convertTo(KUnitConversion::Liter).number();
 
     double temp = (pressure + (m_moles * m_moles * m_Vand_a / volume / volume))\
-                  * (volume - m_moles * b) / m_moles / R;
+                  * (volume - m_moles * b) / m_moles / GAS_R;
     m_temp = Value(temp, KUnitConversion::Kelvin);
     m_temp = m_temp.convertTo(getCurrentUnitId(ui.temp_unit));
     ui.temp->setValue(m_temp.number());
@@ -193,7 +193,7 @@
     double b = m_Vand_b.convertTo(KUnitConversion::Liter).number();
 
     m_moles = (pressure + m_moles * m_moles * m_Vand_a / volume / volume)\
-              * (volume - m_moles * b) / R / temp;
+              * (volume - m_moles * b) / GAS_R / temp;
     ui.moles->setValue(m_moles);
 }
 
@@ -205,7 +205,7 @@
     double b = m_Vand_b.convertTo(KUnitConversion::Liter).number();
 
     double mass = (pressure + m_moles * m_moles * m_Vand_a / volume / volume)\
-                  * (volume - m_moles * b) * m_molarMass / R / temp;
+                  * (volume - m_moles * b) * m_molarMass / GAS_R / temp;
     m_mass = Value(mass, KUnitConversion::Gram);
     m_mass = m_mass.convertTo(getCurrentUnitId(ui.mass_unit));
     ui.mass->setValue(m_mass.number());
Index: kalzium/src/calculator/gasCalculator.h
===================================================================
--- kalzium.orig/src/calculator/gasCalculator.h	2016-01-29 12:51:59.872499528 +0100
+++ kalzium/src/calculator/gasCalculator.h	2016-01-30 18:27:14.006715224 +0100
@@ -28,7 +28,7 @@
 #include "ui_gasCalculator.h"
 
 // The universal Gas constant is defined here.
-#define R 0.08206
+#define GAS_R 0.08206
 
 using namespace KUnitConversion;
 
